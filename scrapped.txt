// class DynmaicHashTable
// {
// private:
//     int size = 17;
//     int *table = new int[size];

// public:
//     DynmaicHashTable()
//     {
//         for (int i = 0; i < size; i++)
//         {
//             table[i] = -1;
//         }
//     }

//     /**
//      * @brief Hashea un string y lo inserta en la tabla
//      * @param id String a insertar
//      */
//     void insert(std::string id)
//     {
//         int hash = hashFunction(id);
//         if (table[hash] == -1)
//         {
//             table[hash] = std::stoi(id);
//         }
//         else
//         {
//             int i = 1;
//             while (table[hash] != -1)
//             {
//                 hash = (hash + i) % size;
//                 i++;
//             }
//             table[hash] = std::stoi(id);
//         }
//     }

//     /**
//      * @brief Función de hash mediante el método de MurmurHash
//      * @param id String a hashear
//      * @return int Hash
//      */
//     uint32_t hashFunction(std::string id)
//     {
//         uint32_t hash = 0;
//         for (char c : id)
//         {
//             hash += int(c);
//             hash *= 0x5bd1e995;
//             hash ^= hash >> 24;
//         }
//         return hash % size;
//     }

//     /**
//      * @brief Funcion que redimensiona la tabla para que sea el doble de grande
//      * y reinserta todos los elementos
//      * @return true si se redimensionó correctamente
//      */
//     bool resize()
//     {
//         int newSize = size * 2;
//         int *newTable = new int[newSize];
//         for (int i = 0; i < newSize; i++)
//         {
//             newTable[i] = -1;
//         }
//         for (int i = 0; i < size; i++)
//         {
//             if (table[i] != -1)
//             {
//                 int hash = hashFunction(std::to_string(table[i]));
//                 if (newTable[hash] == -1)
//                 {
//                     newTable[hash] = table[i];
//                 }
//                 else
//                 {
//                     int j = 1;
//                     while (newTable[hash] != -1)
//                     {
//                         hash = (hash + j) % newSize;
//                         j++;
//                     }
//                     newTable[hash] = table[i];
//                 }
//             }
//         }
//         delete[] table;
//         table = newTable;
//         size = newSize;
//         return true;
//     }
// };